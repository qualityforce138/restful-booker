Index: src/test/java/apiTests/TestBooker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package apiTests;\r\n\r\nimport com.google.gson.Gson;\r\nimport io.restassured.response.Response;\r\nimport org.junit.jupiter.api.Order;\r\nimport org.junit.jupiter.api.Tag;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\n\r\nimport static io.restassured.RestAssured.given;\r\nimport static org.hamcrest.Matchers.*;\r\n\r\npublic class TestBooker {\r\n    String jsonBody;\r\n    String uri = \"https://restful-booker.herokuapp.com/booking/\";\r\n    String ct = \"application/json\";\r\n    Gson gson =new Gson();\r\n    private static String token;\r\n    private static int bookingId;\r\n\r\n    public static String buscarArquivoJson(String arquivoJson) throws IOException {\r\n        return new String(Files.readAllBytes(Paths.get(arquivoJson)));\r\n    }\r\n    @Tag(\"login\")\r\n    @Test\r\n    public void geraToken () throws IOException {\r\n        // Dados de Entrada\r\n        String jsonBody = buscarArquivoJson(\"src/test/resources/json/userToken.json\");\r\n\r\n        Response resp = (Response)\r\n                // Executa\r\n                given ()\r\n                        .contentType (ct)\r\n                        .log ().all ()\r\n                        .body (jsonBody)\r\n                        .when ()\r\n                        .post (\"https://restful-booker.herokuapp.com/auth\")\r\n                        // Valida\r\n                        .then ()\r\n                        .log ().all ()\r\n                        .statusCode(200)\r\n                        .body(\"token\",not(emptyOrNullString()))\r\n                        .extract();\r\n        token = resp.jsonPath().getString(\"token\");\r\n        System.out.println(\"Token obtido: \" + token);\r\n\r\n    }\r\n\r\n\r\n\r\n    @Test\r\n    @Order(0)\r\n    public void testGetBookinglds() throws IOException {\r\n        // Inicio teste Humberto\r\n        // Dados de Entrada\r\n        String jsonBody = buscarArquivoJson(\"src/test/resources/json/getBookinglds.json\");\r\n        // Para realizar o teste verificar inicialmente os dados da lista dinamica\r\n\r\n        // Configura\r\n        given()\r\n                .contentType(ct)\r\n                .log().all()\r\n                .body(jsonBody)\r\n                // Executa\r\n                .when()\r\n                .get(uri)\r\n                // Valida\r\n                .then()\r\n                .log().all()\r\n                .statusCode(200)\r\n                .body(\"bookingId [0]\", is(53))\r\n                .body(\"bookingId [1]\", is(306))\r\n                .body(\"bookingId [2]\", is(848))\r\n                .body(\"bookingId [3]\", is(117))\r\n        ; // fim do teste\r\n\r\n\r\n    }\r\n    @Test\r\n    @Order(1)\r\n    public void testGetBooking() throws IOException {\r\n        // Inicio teste Humberto\r\n        // Dados de Entrada\r\n        String jsonBody = buscarArquivoJson(\"src/test/resources/json/listarBook.json\");\r\n        // Para realizar o teste verificar inicialmente os dados da lista dinamica\r\n        // Configura\r\n        given()\r\n                .contentType(ct)\r\n                .log().all()\r\n                .body(jsonBody)\r\n                // Executa\r\n                .when()\r\n                .get(uri)\r\n\r\n                // Valida\r\n                .then()\r\n                .log().all()\r\n                .statusCode(200)\r\n                .body(\"bookingid [0]\",is(1202))\r\n                .body(\"bookingid [1]\",is(3244))\r\n                .body(\"bookingid [2]\",is(3358))\r\n                .body(\"bookingid [4]\",is(229))\r\n        ; // fim do teste\r\n\r\n    }\r\n\r\n    @Test\r\n    @Tag(\"login\")\r\n    @Order(2)\r\n    // Inicio teste Leonardo\r\n    // teste Commit conta Quality\r\n\r\n    public void testCreateBooking() throws IOException {\r\n        String createBooking = buscarArquivoJson(\"src/test/resources/json/createBooking.json\");\r\n        Response resp = (Response)\r\n\r\n                // Executa\r\n                given ()\r\n                        .contentType (ct)\r\n                        .log ().all ()\r\n                        .body (createBooking)\r\n                        .when ()\r\n                        .post (uri)\r\n                        // Valida\r\n                        .then ()\r\n                        .log ().all ()\r\n                        .statusCode(200)\r\n                        .body(\"booking.firstname\",is(\"Leonardo\"))\r\n                        .body(\"booking.lastname\",is(\"Garson\"))\r\n                        .body(\"booking.totalprice\",is(350))\r\n                        .body(\"booking.bookingdates.checkin\",is(\"2023-07-19\"))\r\n                        .extract();\r\n        bookingId = resp.jsonPath ().getInt (\"bookingid\");\r\n        System.out.println (\"O ID a ser deletado é o: \" + bookingId);\r\n\r\n    }\r\n\r\n\r\n    @Test\r\n    @Order(3)\r\n    public void testCadastrarBook() throws IOException {\r\n        String criarBook = buscarArquivoJson(\"src/test/resources/json/criarBook.json\");\r\n        Response resp = (Response) given()\r\n                .contentType(ct)\r\n                .log().all()\r\n                .body(criarBook)\r\n                .when()\r\n\r\n                .post(uri)\r\n                .then()\r\n                .log().all()\r\n                .statusCode(200)\r\n                .body(\"booking.firstname\",is(\"Everton\"))\r\n                .body(\"booking.totalprice\",is(5050))\r\n                .body(\"booking.bookingdates.checkin\",is(\"2023-07-14\"))\r\n                .extract()\r\n                ;\r\n        bookingId = resp.jsonPath().getInt(\"bookingid\");\r\n\r\n        System.out.println(\"O ID a ser deletado é o: \" + bookingId);\r\n    }\r\n\r\n\r\n    @Tag(\"login\")\r\n    @Test\r\n    @Order(4)\r\n    public  void testUpdateBooking() throws IOException {  // Analizar RESERVA\r\n        //Atualiza e corrige teste de criação, verificando uma reserva atual pela URL\r\n        // inicio dados entrada\r\n\r\n        String jsonBody = buscarArquivoJson (\"src/test/resources/json/updateBook.json\");\r\n\r\n        String idAnalizar = ct;\r\n        //String bookingId = 111;\r\n        String corrigirId = uri;\r\n\r\n        //configuração\r\n        given()\r\n                .contentType(ct)\r\n                .accept(ct)\r\n                .cookie (\"token\", token)\r\n                .log().all()\r\n                .body(jsonBody)\r\n                //Executa\r\n                .when()\r\n                .put (uri + bookingId)\r\n                //Valida\r\n                .then()\r\n                .log().all()\r\n                .statusCode(200);\r\n\r\n\r\n    }\r\n    //.authorization()\r\n    @Test\r\n    @Order(5)\r\n    public void testExcluirBooking(){\r\n        //Execute o teste de criação, verificando oid criado para ser excluido\r\n        String authorizationHeader = \"Basic YWRtaW46cGFzc3dvcmQxMjM=\";\r\n        String bookingId = \"248\";\r\n        String idExcluir = uri + bookingId;\r\n\r\n        given()\r\n                .contentType(ct)\r\n                .accept(ct)\r\n                .log().all()\r\n                .header(\"Authorization\", authorizationHeader)\r\n                .when()\r\n                .delete(idExcluir)\r\n                .then()\r\n                .log().all()\r\n                .statusCode(201)\r\n                .body(is(\"Created\"));\r\n        ;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/apiTests/TestBooker.java b/src/test/java/apiTests/TestBooker.java
--- a/src/test/java/apiTests/TestBooker.java	(revision 7ed6a0745c77dcb94a62a6ac2b8f5e22ca603d3a)
+++ b/src/test/java/apiTests/TestBooker.java	(date 1690427851177)
@@ -192,6 +192,9 @@
                 .log().all()
                 .statusCode(200);
 
+        // atualização dados acertos lista
+
+
 
     }
     //.authorization()
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_19\" default=\"true\" project-jdk-name=\"19\" project-jdk-type=\"JavaSDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 7ed6a0745c77dcb94a62a6ac2b8f5e22ca603d3a)
+++ b/.idea/misc.xml	(date 1690294678865)
@@ -8,5 +8,5 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_19" default="true" project-jdk-name="19" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="19" project-jdk-type="JavaSDK" />
 </project>
\ No newline at end of file
